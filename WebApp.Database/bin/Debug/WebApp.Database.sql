/*
Deployment script for WebApp.Database_1

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "WebApp.Database_1"
:setvar DefaultFilePrefix "WebApp.Database_1"
:setvar DefaultDataPath "C:\Users\Ryan\AppData\Local\Microsoft\VisualStudio\SSDT\PaySpace_Assessment"
:setvar DefaultLogPath "C:\Users\Ryan\AppData\Local\Microsoft\VisualStudio\SSDT\PaySpace_Assessment"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO
PRINT N'Creating [MS_SQLEnableSystemAssemblyLoadingKey]...';


GO
CREATE ASYMMETRIC KEY [MS_SQLEnableSystemAssemblyLoadingKey]
    AUTHORIZATION [dbo]
    WITH ALGORITHM = RSA_1024;


GO
PRINT N'Creating [dbo].[TaxCalculations]...';


GO
CREATE TABLE [dbo].[TaxCalculations] (
    [Id]              INT          IDENTITY (1, 1) NOT NULL,
    [PostalCode]      NVARCHAR (4) NULL,
    [Salary]          VARCHAR (50) NULL,
    [CalculationType] VARCHAR (50) NULL,
    [DateCalculated]  DATETIME     NULL,
    [Tax]             DECIMAL (18) NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [Trigger_Repository_Microsoft.VsCodeIndex_Drop]...';


GO
create trigger [Trigger_Repository_Microsoft.VsCodeIndex_Drop]
    on all server
    for drop_database
    as
    begin
      if eventdata().value('(/EVENT_INSTANCE/DatabaseName)[1]','nvarchar(max)') = N'Microsoft.VsCodeIndex'
      begin
        if exists (select * from sys.server_triggers where name = N'Trigger_Repository_Microsoft.VsCodeIndex_Repository.Item_Logon_SetSecurityClaims')
        begin
          drop trigger [Trigger_Repository_Microsoft.VsCodeIndex_Repository.Item_Logon_SetSecurityClaims] on all server;
        end;

        if exists (select * from sys.server_triggers where name = N'Trigger_Repository_Microsoft.VsCodeIndex_Drop')
        begin
          -- Not renamed so can delete.
          drop trigger [Trigger_Repository_Microsoft.VsCodeIndex_Drop] on all server;
        end;
      end;
    end
GO
PRINT N'Creating [Trigger_Repository_Microsoft.VsCodeIndex_Repository.Item_Logon_SetSecurityClaims]...';


GO
create trigger [Trigger_Repository_Microsoft.VsCodeIndex_Repository.Item_Logon_SetSecurityClaims]
    on all server
    for logon
    as
    begin
      begin try
        if has_perms_by_name(N'[Microsoft.VsCodeIndex].[Repository.Item].[InitializeSession]', N'OBJECT', N'EXECUTE') = 1
        begin
          execute [Microsoft.VsCodeIndex].[Repository.Item].[InitializeSession];
        end
        else if db_id(N'Microsoft.VsCodeIndex') is null
        begin
          declare @warningNoDatabaseMessage nvarchar(165) = N'Error : The database [Microsoft.VsCodeIndex] does not exist.';

          if exists (select *                            -- Caller has Alter Trace permissions.
                     from sys.server_permissions as SP
                     where SP.class = 100 and
                           SP.type in ('ALTR', 'CL') and
                           SP.State in ('G', 'W'))
          begin
            raiserror(@warningNoDatabaseMessage, 0, 0) with log, nowait;
          end
          else
          begin
            raiserror(@warningNoDatabaseMessage, 0, 0) with nowait;
          end;

          if exists (select * from sys.server_triggers where name = N'Trigger_Repository_Microsoft.VsCodeIndex_Drop')
          begin
            drop trigger [Trigger_Repository_Microsoft.VsCodeIndex_Drop] on all server;
          end;

          if exists (select * from sys.server_triggers where name = N'Trigger_Repository_Microsoft.VsCodeIndex_Repository.Item_Logon_SetSecurityClaims')
          begin
            drop trigger [Trigger_Repository_Microsoft.VsCodeIndex_Repository.Item_Logon_SetSecurityClaims] on all server;
          end;
        end;
      end try
      begin catch
        if @@trancount > 0
        begin
          rollback transaction;
        end;

        declare @errorNumber int = error_number();
        declare @errorSeverity int = error_severity();
        declare @errorState int = error_state();
        declare @errorProcedure nvarchar(126) = error_procedure(); -- error_procedure does not return a sysname.
        declare @errorLine int = error_line();
        declare @errorMessage nvarchar(2048) = error_message();

        declare @warningMessage nvarchar(max) = case
                                                  when @errorProcedure is null then N'Warning MSRep000g: Error ' + convert(nvarchar(10), @errorNumber) + N' at line ' + convert(nvarchar(10), @errorLine) + N'.'
                                                  else N'Warning MSRep000g: Error ' + convert(nvarchar(10), @errorNumber) + N' in procedure or trigger named [' + @errorProcedure + N'] failed at line ' + convert(nvarchar(10), @errorLine) + N'.'
                                                end;

        if exists (select *                            -- Caller has Alter Trace permissions.
                   from sys.server_permissions as SP
                   where SP.class = 100 and
                         SP.type in ('ALTR', 'CL') and
                         SP.State in ('G', 'W'))
        begin
          raiserror(@warningMessage, @errorSeverity, 0) with log, nowait;
        end
        else
        begin
          raiserror(@warningMessage, @errorSeverity, 0) with nowait;
        end;

        if exists (select *                            -- Caller has Alter Trace permissions.
                   from sys.server_permissions as SP
                   where SP.class = 100 and
                         SP.type in ('ALTR', 'CL') and
                         SP.State in ('G', 'W'))
        begin
          raiserror(@errorMessage, @errorSeverity, @errorState) with log, nowait;
        end
        else
        begin
          raiserror(@errorMessage, @errorSeverity, @errorState) with nowait;
        end;
      end catch;
    end
GO
PRINT N'Update complete.';


GO
